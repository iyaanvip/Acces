export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  const { title, body, icon, click_action } = req.body || {};
  if (!title || !body) {
    return res.status(400).json({ error: "Title & body required" });
  }

  try {
    const PROJECT_ID = process.env.PROJECT_ID;
    const CLIENT_EMAIL = process.env.CLIENT_EMAIL;
    let PRIVATE_KEY = process.env.PRIVATE_KEY;
    const DATABASE_URL = process.env.DATABASE_URL;

    PRIVATE_KEY = PRIVATE_KEY.replace(/\\n/g, "\n");

    const now = Math.floor(Date.now() / 1000);
    const header = { alg: "RS256", typ: "JWT" };
    const payload = {
      iss: CLIENT_EMAIL,
      sub: CLIENT_EMAIL,
      scope: "https://www.googleapis.com/auth/firebase.messaging",
      aud: "https://oauth2.googleapis.com/token",
      iat: now,
      exp: now + 3600
    };

    const b64u = (str) => Buffer.from(str).toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
    const input = b64u(JSON.stringify(header)) + "." + b64u(JSON.stringify(payload));

    const crypto = await import("node:crypto");
    const sign = crypto.createSign("RSA-SHA256");
    sign.update(input);
    sign.end();
    const signature = sign.sign(PRIVATE_KEY).toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");

    const assertion = input + "." + signature;

    const tokenRes = await fetch("https://oauth2.googleapis.com/token", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({
        grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer",
        assertion
      })
    });

    const { access_token } = await tokenRes.json();

    const tokensRes = await fetch(`${DATABASE_URL}/tokens.json`);
    const tokensJson = await tokensRes.json();
    const tokens = Object.values(tokensJson || {});

    let sent = 0, failed = 0;
    for (const t of tokens) {
      const msg = {
        message: {
          token: t,
          notification: { title, body, icon: icon || "", click_action: click_action || "" }
        }
      };
      const r = await fetch(`https://fcm.googleapis.com/v1/projects/${PROJECT_ID}/messages:send`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${access_token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(msg)
      });
      if (r.ok) sent++; else failed++;
    }

    res.json({ sent, failed });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
}
